 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?

    La captura muestra que hay 954 paquetes. Esto lo podemos ver por el número de secuencia que tenemos al final de la captura, ya que el primer número de secuencia en nuestro caso es 1.

 ** ¿Cuánto tiempo dura la captura?

    El tiempo de duración de la captura lo podemos ver en Time. La captura dura 56.149345 segundos.

 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?

    La IP donde se ha efectuado la captura es 192.168.1.34, esto lo sabemos porque podemos ver en la captura el flujo que se captura entre esta máquina y las máquinas con IPs 80.58.61.250,
    86.64.162.35 y 194.39.182.241. Si se hubiera realizadao la captura en otra máquina veríamos un flujo de paquetes distinto.
    La IP donde se ha realizado la captura es una IP privada. Porque sabemos que hay unas IPs reservadas como privadas, y en la clase C el rango de IPs resrvadas como privadas es:
    192.168.0.0 - 192.168.255.255


3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
    
    En Protocol Hierarchy podemos ver que el porcentaje de UDP es mucho mayor que el correspondiente a TCP. Vemos que el porcentaje de paquetes en UDP es 96,23% frente a un 2,10% de TCP, y el 
    porcentaje en bytes de UDP es 98,94% mientras que el de TCP es 0,75%.
    Esto si es consistente con una aplicación que transmite en tiempo real, ya que se necesita un intercambio de paquetes mayor, además UDP es bueno en este tipo de aplicaciones debido a que no se 
    pueden realizar retrasmisiones por los retardos que existen en estas aplicaciones y sus implicaciones.

 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?

    En la jerarquía de protocolos podemos ver también RTP (Real-Time Transport Protocol), RTCP (Real-Time Transport Control Protocol), IP (Internet Protocol Version 4),
    SIP (Session Initiation Protocol), ICMP (Internet Control Message Protocol), ARP (Address Resolution Protocol), DNS (Domain Name Service), H.261, STUN (Session Traversal Utilities for NAT) y
    HTTP (Hypertext Transfer Protocol).


4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?

    Cuando filtramos vemos los momentos en los que se envían paquetes SIP. Se envían paquetes SIP en los siguientes segundos: 7,343770; 7,427990; 7,567714; 14,426793; 14,610573; 16,233522; 16,460741;
    16,334756; 16,343704; 38,119195; 38,362649; 38,362673; 38,937875; 39,154151; 39,178064; 39,204022; 39,229683; 55,694378; 55,776662; 55,774638; 55,859934

 ** Y los paquetes con RTP, ¿cuándo se envían?

    Los paquetes RTP se envían de manera casi continua apoximadamente entre los segundos 17 y 38,2 segundos.     


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?

    En las primeras tramas al arrancar Ekiga vemos que se utiliza servicio DNS (Domain Name System). En estas primeras tramas se quiere conocer la dirección IP del servidor ekiga.net.
    
 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?

    Podemos ver que la dirección IP del servidor del ordenador que ha lanzado Ekiga es 80.58.61.250

 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?

    La dirección IP de ekiga.net que devuelve el servicio de nombres es la 86.64.162.35

 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?

    Eso se debe a que DNS sigue el método de resolución inversa de  un dirección IP (resolución DNS hacia adelante), se usa la entrada in-addr.arpa, que es algo propio de IPv4.
    En nuestro caso vemos que se pide 35.162.64.86.in-addr.arpa, ya que ésta dirección IP que se pide es la inversa de la 86.64.162.35, que es la dirección IP e ekiga.net que nos
    devolvía el servicio de nombres.    
    


6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?

    La URL que se está pidiendo la tenemos que ver en el paquete de HTTP que emplea el método GET (GET /ip/ HTTP/1.1). En este paquete estudiamos los campos, y en Hypertext Transfer Protocol
    miramos GET /ip/ HTTP/1.1. Ahora en este campo, en la parte de Full request URI, vemos la URL que se está pidiendo.
    La URL que se está pidiendo es la siguiente: http://ekiga.net/ip/

 ** ¿Qué user agent (UA) la está pidiendo?

    El User Agente que está pidiendo la URL lo podemos ver en el mismo paquete, en el campo Hypertext Transfer Protocol, en User-Agent.
    En este caso el User Agent que la está pidiendo es Ekiga.
    
 ** ¿Qué devuelve el servidor?

    Para ver que devuelve el servidor miramos la trama de HTTP en la que se envía HTTP/1.1 200 OK. En esta trama miramos la información del paquete, y vemos en el campo Hypertext Transfer Protocol,
    en Line-based text data la dirección IP que devuelve el servidor. Esta dirección que devuelve el servidor es la dirección pública correspondiente a la dirección IP privada 192.168.1.34, 
    que es la dirección IP de la máquina desde la que se realizaba la captura. Tiene que pedir al servidor una dirección IP pública para poder comunicarse con otras redes.
    La dirección IP que devuelve el servidor es: 83.36.48.212
    
 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?

    Si lanzamos el navegador web y vamoas a ver la misma URL, veremos la misma dirección IP pública de nuestro ordenador. El servidor lo que hace es responderle con la dirección IP pública
    al cliente para que pueda comunicarse con otras redes.


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.

    STUN (Session Traversal Utilities for NAT) es un protocolo de red del tipo cliente/servidor que permite a clientes NAT encontrar su dirección IP pública, el tipo de NAT en el 
    que se encuentra y el puerto de Internet asociado con el puerto local a través de NAT. Esta información es usada para configurar una comunicación UDP entre dos hosts que se encuentren tras    
    enrutadores NAT.SIP utiliza paquetes UDP para la señalización de tráfico de sonido, vídeo y texto sobre Internet, pero no permite establecer la comunicación cuando los extremos se encuentran 
    detrás de enrutados NAT. Por ello suele usarse STUN en estas aplicaciones, para poder establecer la comunicación.

    En nuestro caso se emplea porque se quiere saber la dirección IP publica de la máquina con dirección privadda, que está dentro de un NAT.

 ** ¿Estamos tras un NAT?

    En nuestro caso sí estamos detrás de un NAT, ya que en las capturas vemos que es necesario utilizar STUN, además la IP 192.168.1.34 ya nos indicaba que estábamos en una red local.



8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?

    En la trma 46 podemos ver cuál es la dirección IP que tiene el servidor Registrar, ya que la máquina 192.168.1.34 envía la trama con método REGISTER al servidor Register.
    La dirección IP del servidor Registrar es: 86.64.162.35

 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?

    Los paquetes SIP se envían al puerto 5060 del servidor Registrar. Esto se ve en el campo User Datagram Protocol, en Destiation Port.

 ** ¿Qué método SIP utiliza el UA para registrarse?

    El método que utiliza el User Agent para registrarse lo podemos ver en esta trama (46), en el campo Session Initiation Protocol, en Request-Line, en Method.
    En nuestro caso este método es el método REGISTER.

 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?

    En la trama 46, en el campo Session Initiation Protocol, en Message Header, en Allow podemos ver los métodos de SIP que entiende el User Agent.
    En nuestro caso vemos que los métodos que entiende el UA son: INVITE, ACK, OPTIONS, BYE, CANCEL, NOTIFY, REFER, MESSAGE.
    Podemos ver que en este caso el UA no entiende todos los métodos existetes en SIP, que son: INVITE,ACK,BYE,CANCEL, OPTIONS, PRACK, SUSCRIBE, NOTIFY, PUBLISH, INFO,REFER, MESSAGE y UPDATE.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?

    En la captura, en la trama 50 podemos ver que en el primer intento no se registra con éxito, ya que el servidor envía una respuesta de 401 Unauthorized. Este mensaje aparece porque el cliente
    se debe identificar para que se pueda registrar con éxito.

 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?

    Sabemos si el registro se ha realizado correctamente o no viendo la trama de respuest SIP del servidor, si se ha realizado correctamente el servidor enviará 200 OK.

 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)

    Podemos ver que se diferencian por el tamaño, en el primer REGISTER se envían 523 bytes, mientras que en el segundo se envían 712. Esto se debe a que en el segundo intento se incluye la línea:
    Authorization: Digest username="grex", realm="ekiga.net", nonce="45a439ee7438aaea43ae8c7c2382922187f86c8b", uri="sip:ekiga.net", algorithm=md5, response="5267d4e49d707d4443baefa913e8ff90".
    Lo que sucede es que en el primer intento no se identifica, entonces el servidor le manda un mensaje de no autorizado con el campo Nonce (nonce="45a439ee7438aaea43ae8c7c2382922187f86c8b"), que será
    la clave con la que se deba identificar en el próximo intento que realice, esto lo vemos en la línea anterioe en Authorization en nonce.

 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.

    El tiempo de expiración de la sesión se indica en el campo Message Header, en Expires. El valor del tiempo de expiración de la sesión es 3600 segundos.


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?

    En la trama de INVITE, en el campo de Session Initiation Protocol, en Message Header, en el campo From podemos ver quién efectúa la llamada. Enste caso el nombre de la persona que efectúa
    dicha llamada es Gregorio Robles, quien tiene la siguiente dirección SIP: grex@ekiga.net

 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?

    El contenido de la trama lo vemos en el campo Session Initiation Protocol, en Message Body. En este campo podemos ver que se emplea el protocolo SDP (Session Description Protocol). Además
    vemos que contiene información de la sesión que se quiere establecer, como por ejemplo información sobre la versión de protocolo que se emplea, el creador de la sesión, información de la conexión,
    el momento en el que se realiza la conexión, la descripción de medios con atributos.

 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?

    El primer intento de INVITE no tiene éxito. Esto lo podemos ver en la trama 85, en la que el servidor envía un mensaje de 407 Proxy Authentication Required. Esto se debe a que el servidor proxy 
    requiere que se autentique.

 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?

    En el segundo INVITE podemos ver que el tamaño del paquete es superior (1181 bytes) respecto al primer intento (744 bytes). El paquete es mayor debido a que en el segundo intento se incluye
    la línea: Proxy-Authorization: Digest username="grex", realm="ekiga.net", nonce="45a439f6ba5f681cd945fb7c40529fd1e0f28a81", uri="sip:500@ekiga.net", algorithm=md5,
    response="9a5627c14a8a433bd308d2ec54777240". Vemos que se ha incluido el campo Proxy Authorization, que es un campo necesario para poder establecer la conexión. De esta forma la conexión
    se establecerá con éxito.


11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?

    Podemos ver en las tramas siguientes que se utilizan los protocolos: RTP, H.261, RTCP y ARP.

    El protocolo RTP (Real-time Transport Protocol) es un protocolo de nivel de sesión utilizado para la transmisión de información en tiempo real, como por ejemplo audio y vídeo en una 
    video-conferencia.
    
    H.261 funciona sobre RTP y permite la compresión de audio, video, videoconferencias.

    El protocolo RTCP (Rel-time Transport Control Protocol) es utilizado para enviar datos de control entre el emisor y receptor de una secuencia RTP. Los paquetes RTCP son enviados aproximadamente
    cada cinco segundos, y contienen datos que ayudan a verificar las condiciones de transmisión en el extremo remoto. 
    
    El protocolo ARP (Address Resolution Protocol) es un protocolo de comunicaciones de la capa de enlace de datos, responsable de encontrar la dirección de hardware (Ethernet MAC) que corresponde a
    una determinada dirección IP. Para ello se envía un paquete (ARP request) a la dirección de difusión de la red (broadcast, MAC = FF FF FF FF FF FF) que contiene la dirección IP por la que se 
    pregunta, y se espera a que esa máquina (u otra) responda (ARP reply) con la dirección Ethernet que le corresponde. Cada máquina mantiene una caché con las direcciones traducidas para reducir el
    retardo y la carga. ARP permite a la dirección de Internet ser independiente de la dirección Ethernet, pero esto solo funciona si todas las máquinas lo soportan.
    
 ** ¿Cuál es el tamaño de paquete de los mismos?

    El tamaño de los paquetes RTP es de 214 bytes, para RTCP de 102 bytes. EL tamaño de H.261 es variable.

 ** ¿Se utilizan bits de padding?

    No se utilizan bits de padding, ya que se puede ver que en la trama en el campo Padding aparece False.

 ** ¿Cuál es la periodicidad de los paquetes que se envían?
    
    La periodicidad de los paquetes que se envían la podemos comprobar en el campo timestamp.
    Para poder calcular esta peridiocidad tenemos que mirar un paquete G.711, donde podemos ver que se transmite a 64kb/s, además conocemos el timestamp (160), es decir, que seremos capaces
    de enviar 50 paquetes (64000/(8*160)) de 1280 bits (64000/50) por segundo. Es decir, el periodo será 1/50, que es 0.02 segundos.

 ** ¿Cuántos bits/segundo estamos enviando?

    Si se transmite a 64kb/s, vemos que estamos enviando a 64000 bit por segundo.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?

    Para poder ver los flujos RTP vamos a Telephony, pinchamos en la opción RTP y ahí en Show all streams. Aquí, podemos observar que hay dos flujos: uno es un flujo de audio en el puerto 5010
    con codificación g.711 y otro de vídeo en el puerto 5014 con codificación h261.

 ** ¿Cuántos paquetes se pierden?

    En Show all streams podemos ver los paquetes perdidos en el campo Lost. En este campo vemos que no se pierde ningún paquete ya que te marca 0.0%.

 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?

    El mayor valor del delta es 1290,479000 ms para el flujo de vídeo, y 1290,444000 ms para el flujo de audio.
    El valor de delta indica el valor de tiempo máximo existente entre un paquete y el anterior en el envío de paquetes RTP.

 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?

    Los valores de jitter máximo los miramos en Max Jitter (ms), y son los siquientes: para el caso del vídeo es de 183,095775 ms, y para el caso del audio es de 119,635154 ms.
    Los valores de jitter medio los miramos en Mean Jitter (ms), y son los siguientes: para el flujo de vídeo es de 153,240269 ms, y para el flujo de audio es de 42,500200 ms.
    Los paquetes del transmisor pueden llegar a su destino con diferentes retardos. Un retardo de un paquete varía impredeciblemente con su posición en las colas de los ruteadores a lo largo del 
    camino entre el transmisor y el destino. Esta variación en retardo se conoce como jitter y puede afectar seriamente la calidad del flujo de audio y/o vídeo.
    El jitter entre el punto inicial y final de la comunicación debiera ser ser inferior a 100 ms. En nuestro caso el jitter medio en audio es de 42,500200ms, es decir, que podemos considerar
    que es una conversación de calidad.



13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?

    Para poder ver cuánto valen el delta y el jitter del primer paquete que ha llegado nos metemos en Telephony, RTP, Stream Analysis, y ahí vemos estos en Delta(ms) y Filtered Jitter(ms) 
    repectivamente. En nuestro caso el valor de delta es 0.00 ms, y el valor del jitter es de 0.00 ms.

 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?

    Sí que lo podemos saber, mediante el número de secuencia, y el marker del paquete RTP, que es TRUE y nos indica que es el primer paquete RTP de la comunicación.
   
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?

    Los valores de jitter son menores de 10ms hasta el paquete 247 (vemos que paquete es el Packet). Este paquete presenta un jitter de 38,8ms.    

 ** ¿A qué se debe el cambio tan brusco del jitter?

    Este cambio tan brusco del jitter se debe a un cambio también muy brusco en el valor de delta, que ahora es de 554,74ms, esto implica un cambio muy grande en la velocidad de transimisión de los
    paquetes.
    
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?

    Podemos ver que si que es comparable, ya que como hemos visto anteriormente el jitter varía en función del valor de la delta, que nos da la diferencia de teimpo entre el envío de un
    paquete y el anterior. En este caso al tener un aumento considerable de la delta el paquete llegará mucho más tarde comparado con los paquetes enviados con anterioridad.

 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?

    La dependencia entre el tiempo transcurrido desde el paquete anterior y el valor del jitter es la variabilidad del retardo. Esto se debe a que sabemos que la fórmula que se una para calcular el 
    jitter es J(i) = J(i-1) + (|D(i-1, i)| - J(i-1))/16 , donde D(i-1, i) es la diferencia de tiempo de llegada entre un paquete y el paquete anterior, entonces la diferencia es la siguiente:
    |D(i-1,i)| = J(i) + J(i-1))/16 - J(i-1). El jitter del paquete anterior es J(i-1). 


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?

    Al mirar en la captura en Telephony, VoIP calls, en Graph o  Flow, podemos ver los instantes de tiempo en los que se inicia y termina la conversación (esto lo vemos en el campo Time).
    En nuestro caso la conversación comienza en el segundo 14,426793, y termina en el segundo 39,229683. Es decir, la conversación dura 24,80289 segundos (39,229683 - 14,426793).

 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
    
    Los SSRCs los vemos en las tramas en Synchronization Source Identifier. En nuestra captura tenemos dos SSRC-. una de audio y otra de vídeo:
    En los paquetes de G.711 (paquetes de audio) vemos que nos encontramos con: Synchronization Source identifier: 0xbf4afd37 (3209362743), por lo que en este caso el SSRC es 0xbf4afd37 (3209362743).
    En los paquetes de H.261 (paquetes de vídeo) observamos que tenemos: Synchronization Source identifier: 0x43306582 (1127245186), es decir, el SSRC será  0x43306582 (1127245186)
    Tenemos varios paquetes SSRCs porque tenemos dos flujos: uno de audio y otro de vídeo.
    Para poder ver si hay CSRCs tenemos que mirar en el campo Contributing source identifiers count, que aparecerá con valor cero si no hay CSRCs y con otro valor si existe CSRC. Si no hay CSRC quiere 
    decir que nuetsros SSRCs no pasan por mezcladores. En RTP vemos que encontramos el campo Contributing source identifiers count a cero, es decir, no hay CSRCs. En paquetes de RTCP se ve que el 
    campo de CSRC aparece a uno.
    


15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?

    El método SIP que se utiliza para finalizar la conversación es BYE. Lo podemos ver en la trama 924, en Session Initiation Protocol.

 ** ¿En qué trama(s)?

    Este método de SIP se envían en las tramas 924, 925, 927 y 933.

 ** ¿Por qué crees que se envía varias veces?

    Vemos que se envía varias veces porque aún el servidor no ha enviado un 200 OK (estos se envían en las tramas 938, 939, 940 y 941). Esto se debe a que RTP emplea UDP, que es un protocolo no fiable,
    entonces se envían varias veces estas tramas para asegurarse de que llega el mensaje al otro extremo, es decir, se emplea la retransmisión para mantener fiabilidad.


16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
 ** ¿En qué trama sucede esto?
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
 ** ¿Son diferentes el registro y la descripción de la sesión?


18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
 ** ¿Cuál es su periodicidad?
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
